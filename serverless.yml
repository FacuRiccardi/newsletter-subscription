service: newsletter-example

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  timeout: 30
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - s3:GetObject
      Resource: arn:aws:s3::*:*

    - Effect: 'Allow'
      Action:
        - 'logs:*'
      Resource: arn:aws:logs:*:*:*

    - Effect: 'Allow'
      Action:
        - SNS:*
      Resource: '*'

    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: '*'

    - Effect: Allow
      Action:
        - SQS:*
      Resource: '*'

custom:
  stage: ${opt:stage, opt:s, self:provider.stage}
  region: ${opt:region, self:provider.region}
  userRegisteredTopic: "newsletter-user-registered-${self:custom.stage}"
  userCreatedTopic: "newsletter-user-created-${self:custom.stage}"
  usersTable: "newsletter-users-${self:custom.stage}"
  csvBucket: "newsletter-users-${self:custom.stage}"
  welcomeEmailQueue: "newsletter-welcome-email-${self:custom.stage}"
  serverless-offline:
    skipCacheInvalidation: true

functions:
  # ---- Subscription Services ----
  subscribeFromAPI:
    handler: src/handlers/subscription/subscribeFromAPI.handler
    environment:
      userRegisteredTopicArn: { "Fn::Join" : ["", ["arn:aws:sns:${self:custom.region}:", { "Ref" : "AWS::AccountId" }, ":${self:custom.userRegisteredTopic}" ] ]  }
    events:
      - http:
          path: users/subscribe
          method: post
          cors: true
          warmup: true

  subscribeFromCSV:
    handler: src/handlers/subscription/subscribeFromCSV.handler
    environment:
      userRegisteredTopicArn: { "Fn::Join" : ["", ["arn:aws:sns:${self:custom.region}:", { "Ref" : "AWS::AccountId" }, ":${self:custom.userRegisteredTopic}" ] ]  }
      csvBucket: ${self:custom.csvBucket}
    events:
      - s3:
          bucket: ${self:custom.csvBucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv

  # ---- Database Services ----
  saveUser:
    handler: src/handlers/database/saveUser.handler
    environment:
      usersTable: ${self:custom.usersTable}
    events:
      - sns: ${self:custom.userRegisteredTopic}

  processStream:
    handler: src/handlers/database/processStream.handler
    environment:
      userCreatedTopicArn: { "Fn::Join" : ["", ["arn:aws:sns:${self:custom.region}:", { "Ref" : "AWS::AccountId" }, ":${self:custom.userCreatedTopic}" ] ]  }
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - DynamoDbTable
              - StreamArn

# ---- Welcome Email Services ----
  receiveMessages:
    handler: src/handlers/welcomeEmail/receiveMessages.handler
    environment:
      SENDGRID_API_KEY: ''
      queueURL:
        Ref: WelcomeEmailQueue
    events:
      - schedule: rate(1 minute)

# ---- AWS Resources ----
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    UserCreatedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.userCreatedTopic}
        Subscription:
          - Endpoint: { "Fn::GetAtt": ["WelcomeEmailQueue","Arn"] }
            Protocol: sqs

    WelcomeEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.welcomeEmailQueue}

    WelcomeQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: WelcomeEmailQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - SQS:SendMessage
              Resource: { "Fn::GetAtt": ["WelcomeEmailQueue","Arn"] }

plugins:
  - serverless-offline
  - serverless-plugin-warmup
